- hosts: kube
  tasks:
    - name: Create a directory if it does not exist
      file:
        path: /dvd
        state: directory

    - name: Mount dvd for local yum
      mount:
        path: /dvd
        src: /dev/sr0
        fstype: iso9660
        state: mounted

    - name: kernel parametter    
      shell:
        cmd: sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config

    - name: swap off
      shell:  
        cmd: swapoff -a

    - name: Adding a line in rc.local
      lineinfile:
        path: /etc/rc.d/rc.local
        line: swapoff -a

    - name: Active rc.local in boot time
      shell:
        cmd: chmod +x /etc/rc.d/rc.local

    - name: copy repo file
      copy:
        src: server.repo
        dest: /etc/yum.repos.d/

    - name: loacl package install
      package: 
        name: 
         - python3
         - iproute-tc
        state: present

    - name: Python interpriter
      pip:
        name: docker-py

    - name: Stop firewall service
      service: 
        name: firewalld
        state: stopped
        enabled: no

    - name: adding docker repo
      yum_repository:
        name: Docker
        description: docker repo
        baseurl: https://download.docker.com/linux/centos/7/x86_64/stable/
        gpgcheck: no

    - name: Install Docker
      shell:
        cmd: yum install --nobest docker-ce -y

    - name: start docker service
      service:
        name: docker
        state: restarted
        enabled: yes

    - name: driver configuration in docker
      copy: 
        src: daemon.json
        dest: /etc/docker/daemon.json

    - name: start docker service
      service:
        name: docker
        state: restarted

    - name: kubernates repo
      yum_repository:
        name: kubernetes
        description: kubernetes repo
        baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch
        gpgcheck: yes
        state: present
        enabled: yes
        exclude: kubelet,kubeadm,kubectl
        repo_gpgcheck: yes
        gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg,https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

        #    - name: gpg key import
        # rpm_key:
        # state: present
        #key: https://packages.cloud.google.com/yum/doc/yum-key.gpg

        # rpm_key:
        # state: present
        # key: https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

    - name: insatll kubeadm packages
      shell:
        cmd: yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes 

    - name: start kubelet service
      service:
        name: kubelet
        enabled: yes     

    - name: modify br_netfilter for ipv6
      copy:
        content: 'net.bridge.bridge-nf-call-ip6tables = 1'
        dest: /etc/sysctl.d/k8s.conf

    - name: modify br_netfilter for ipv4
      copy:
        content: 'net.bridge.bridge-nf-call-iptables = 1'
        dest: /etc/sysctl.d/k8s.conf

    - name: kernel tuning
      shell: 
        cmd: sysctl --system

    - name: host configuration
      copy:
        src: hosts
        dest: /etc/hosts

    - name: reboot all kube system
      reboot:

- hosts: kubemaster
  tasks:
    - name: kubemaster config pull
      shell:
        cmd: kubeadm config images pull

    - name: kubeadm initiate 
      shell:
        cmd: kubeadm init --pod-network-cidr=10.240.0.0/16

    - name: kube directory configure
      file:
        path: /root/.kube
        state: directory
        mode: 0755
        owner: root
        group: root

    - name: copy kubemaster config file
      shell: 
        cmd: cp /etc/kubernetes/admin.conf /root/.kube/config

    - name: configure kube-flannel 
      shell:
        cmd: kubectl apply  -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

    - name: Token generate for slave node
      shell:
        cmd: kubeadm token create  --print-join-command
      register: kmoutput

    - debug:
        var: kmoutput.stdout

- hosts: kubeslave
  tasks:
    - name: joining kubernates cluster as slave node
      shell:
        cmd: "{{ kmoutput.stdout }}"
      register: ksjo

    - debug:
        var: ksjo
